# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vxAcUdXh84iLZcNHJ68z7okoYqi7ictO

Used this code from the pandas intro to mount my google drive and open the csv
"""

from google.colab import drive
drive.mount('/content/drive')

"""import csv and pandas, set the dataframe"""

import csv
import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/DATA/olympic_medals.csv")

"""2 A) Find the size of the data frame. How many rows, how many columns?"""

df.shape

"""2 B) Use the appropriate function to report the data types for all columns"""

df.info()

"""2 C) Find how many unique locations olympics were held at."""

df['Location'].unique()

"""2 D) Find how many medals the USA team won in total."""

df[df['Nationality']=='USA'].groupby('Nationality').count()

"""2 E) Find the total number of medals for each Nationality. (Hint: please search for groupby() function with count)"""

df.groupby(['Nationality','Medal']).count()

"""Loading cause of death CSV"""

import csv
import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/DATA/causes_of_death.csv")

"""3 A) Find the size of the data frame. How many rows, how many columns?"""

df.shape

"""3 B) What is the average death count across the country?

"""

df['Deaths'].mean()

"""3 C) What is the total death count for each state. (Hint: please search for groupby() function with sum)"""

df.groupby(['State']).sum(['Deaths'])

"""3 D) What is the average death count for each state. (Hint: please search for groupby() function with mean)"""

df.groupby(['State']).mean(['Deaths'])

"""3 E) What is the total death count for males and females in each state. (Hint: groupby() function with sum, but you
will have two attributes/columns for the groupby() )
"""

df.groupby(['State', 'Gender']).sum()

"""3 F) Drop your rows which have NA in it. Then verify it by using head() to show they are removed. (Hint: dropna())"""

df.dropna()
df.head()

"""3 G) Create a column called ratio and assign the ratio of death counts to population to fill its values. Then verify it
by using head().
"""

df['Ratio'] = df['Deaths']/(df['Population'])
df.head()

"""3 H) Select only rows where Ten-Year Age Groups Code is equal to 1. Notice that this column has string data type."""

df2=df[df['Ten-Year Age Groups Code']=='1']
df2

"""3 I) Use the selected rows above (you can either assign to another variable or keep using dot(.) operator) to chain
with other functions (groupby, sum, sort_values) to view your data sorted from the highest Crude rate to
the smallest. This will show the infant mortality rate for all states.
"""

df2.groupby('State').sum().sort_values('Crude Rate', ascending=False)